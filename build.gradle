/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'eric' at '15-7-16 下午3:18' with Gradle 2.5-20150605053008+0000
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.5-20150605053008+0000/userguide/tutorial_java_projects.html
 */
/* 
 *	gradle 主文件 
 *	部分内容参考： https://gist.github.com/dirkraft/8230302 
 * 
 */ 

 
apply plugin:'java'
import java.text.SimpleDateFormat 
 
 
// Settings 
ext { 
      // Project constants 
     project_group = 'saturn' 
     project_name = 'saturn' 
     project_version = '0.0.1-SNAPSHOT' 
     project_description = 'Template for Java, Maven, and Eclipse with minimum POM requirements for Maven central.' 
     project_jdk = '1.8' 


 
     /** 生成 manifest 的方法，在打 jar 包或者 war 包时候调用 */ 
    defaultManifest = { proj -> 
         return manifest { 
             def buildTimeAndDate = new Date() 
             def buildDateTime = new SimpleDateFormat('yyyy-MM-dd HH:mm').format(buildTimeAndDate) 
             attributes 'Build-By': System.properties['user.name'] 
             attributes 'Created-By': System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.getProperty("java.vm.version") + ")" 
             attributes 'Build-Host': InetAddress.localHost.hostName 
             attributes 'Build-Date-Time': buildDateTime 
             attributes 'Specification-Title': proj.archivesBaseName
             attributes 'Specification-Version': project_version 
             attributes 'Specification-Vendor': project_group 
             attributes 'Implementation-Title': proj.archivesBaseName 
             attributes 'Implementation-Version': project_version 
             attributes 'Implementation-Vendor': project_group 
         } 
    } 

 

 
    /** 
     * 子项目中调用，用于生成编译数字，此数字可以作为版本号的一个组成部分。 
     * 
     * 存储位置为子项目下的 build_number.properties,此文件与子项目的 build.gradle 平级 
    */ 
    buildNumberIncrease = { 
         def _build_number_file = new File('build_number.properties') 
         def buildNumber = _build_number_file.text.toInteger() 
         println '-- Old build number: ' + _build_number_file.text 
         buildNumber++ 
         println '-- New build number: ' + buildNumber 
         _build_number_file.text = buildNumber  
         return buildNumber 
    } 
 
} 


// Apply the java plugin to add support for Java

apply plugin: 'eclipse' 

 
// 引入jar包定义 
// 这个文件中定义的jar包可以直接在子项目中使用，不需要再次使用 apply from 这个语句 
apply from: 'dependency.gradle' 


allprojects { 
	//apply plugin: 'license' 
} 

subprojects { subproj -> 
 
	group = project_group 
    
	apply plugin: 'java' 
    sourceCompatibility = project_jdk 
    targetCompatibility = project_jdk 
  
    apply plugin: 'maven' 
    apply plugin:'eclipse'
    
 
    repositories { 
    	mavenCentral() 
	} 
 	
 	jar { 
	    doFirst { 
             // 生成jar 包的时候按此规则生成 manifest 文件 
             manifest = defaultManifest({subproj}) 
         } 
	} 
 
//   task javadocJar(type: Jar, dependsOn: javadoc) { 
//         classifier = 'javadoc' 
//         from 'build/docs/javadoc' 
//         doFirst { 
//            manifest = defaultManifest({subproj}) 
//         } 
//	 } 
 
	task sourcesJar(type: Jar) { 
         classifier = 'sources' 
         from sourceSets.main.allSource 
         doFirst { 
             manifest = defaultManifest({subproj}) 
         } 
     } 
    
    //修改编码 
	[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8' 
 
	artifacts { 
		archives jar 
		//archives javadocJar 
		archives sourcesJar 
	} 
 
 
	configurations { 
		deployerJars 
 
		// 所有需要忽略的包定义在此 
		all*.exclude group: 'commons-httpclient' 
		all*.exclude group: 'commons-logging' 
        all*.exclude group: 'commons-beanutils', module: 'commons-beanutils' 
	} 
 
	dependencies { 
		// 用于上传自己项目的jar 包到中心 maven 库 
		//deployerJars "org.apache.maven.wagon:wagon-ssh:2.2" 

 
 
		// 通用依赖 
		compile ( 
			libraries.'logback-classic', 
			libraries.'logback-core',
			libraries.'jcl-over-slf4j',
			libraries.'log4j-over-slf4j',
			libraries.'slf4j-api'
		) 
 
		// 引入根目录和各子项目下的libs中的jar包 
		ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar') 
		ext.rootProjectLibs = new File(rootProject.rootDir, 'libs').getAbsolutePath() 
		ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar') 
		compile jarTree 
 		
    	// 测试依赖 
		testCompile ( 
			libraries.'junit'
		) 
	} 
	
	
 
 
     // 显示当前项目下所有用于 compile 的 jar. 
	task listJars(description: 'Display all compile jars.') << { 
		configurations.compile.each { File file -> println file.name } 
	} 
} 
